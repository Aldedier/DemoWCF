//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClienteWCF.ProxyCalculadora {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxyCalculadora.ICalculadora")]
    public interface ICalculadora {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Suma", ReplyAction="http://tempuri.org/ICalculadora/SumaResponse")]
        double Suma(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Suma", ReplyAction="http://tempuri.org/ICalculadora/SumaResponse")]
        System.Threading.Tasks.Task<double> SumaAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Multiplicacion", ReplyAction="http://tempuri.org/ICalculadora/MultiplicacionResponse")]
        double Multiplicacion(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Multiplicacion", ReplyAction="http://tempuri.org/ICalculadora/MultiplicacionResponse")]
        System.Threading.Tasks.Task<double> MultiplicacionAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Division", ReplyAction="http://tempuri.org/ICalculadora/DivisionResponse")]
        double Division(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculadora/Division", ReplyAction="http://tempuri.org/ICalculadora/DivisionResponse")]
        System.Threading.Tasks.Task<double> DivisionAsync(double n1, double n2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculadoraChannel : ClienteWCF.ProxyCalculadora.ICalculadora, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculadoraClient : System.ServiceModel.ClientBase<ClienteWCF.ProxyCalculadora.ICalculadora>, ClienteWCF.ProxyCalculadora.ICalculadora {
        
        public CalculadoraClient() {
        }
        
        public CalculadoraClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculadoraClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculadoraClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculadoraClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Suma(double n1, double n2) {
            return base.Channel.Suma(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> SumaAsync(double n1, double n2) {
            return base.Channel.SumaAsync(n1, n2);
        }
        
        public double Multiplicacion(double n1, double n2) {
            return base.Channel.Multiplicacion(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplicacionAsync(double n1, double n2) {
            return base.Channel.MultiplicacionAsync(n1, n2);
        }
        
        public double Division(double n1, double n2) {
            return base.Channel.Division(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> DivisionAsync(double n1, double n2) {
            return base.Channel.DivisionAsync(n1, n2);
        }
    }
}
